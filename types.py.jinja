""" Contains some shared types for properties """
from http import HTTPStatus
from typing import Any, BinaryIO, Generic, MutableMapping, Optional, Tuple, TypeVar, Literal, Annotated, Dict

from pydantic import BaseModel, ConfigDict, model_serializer


# Unset = Annotated[bool, False]
# UNSET = False

class Unset:
    def __bool__(self) -> Literal[False]:
        return False


UNSET: Unset = Unset()

def check_unset(value) -> bool:
    return value.__class__.__name__ == "Unset"

class StripUnset(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True, protected_namespaces=())

    @model_serializer
    def ser_model(self) -> Dict[str, Any]:
        ret = {}
        for k, v in self.__dict__.items():
            if check_unset(v):
                continue
            if isinstance(v, list):
                newlist = []
                for i in v.copy():
                    if not check_unset(i):
                        newlist.append(i)
                ret[k] = newlist
            else:
                ret[k] = v
        return ret

{# Used as `FileProperty._json_type_string` #}
FileJsonType = Tuple[Optional[str], BinaryIO, Optional[str]]


class File(StripUnset):
    """ Contains information for file uploads """

    payload: BinaryIO
    file_name: Optional[str] = None
    mime_type: Optional[str] = None

    def to_tuple(self) -> FileJsonType:
        """ Return a tuple representation that httpx will accept for multipart/form-data """
        return self.file_name, self.payload, self.mime_type


T = TypeVar("T")


class Response(StripUnset, Generic[T]):
    """ A response from an endpoint """

    status_code: HTTPStatus
    content: bytes
    headers: MutableMapping[str, str]
    parsed: Optional[T]


__all__ = ["File", "Response", "FileJsonType"]
